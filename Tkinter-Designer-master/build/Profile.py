
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


import os
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Listbox, Scrollbar, Tk, Canvas, Button, PhotoImage, Frame, messagebox
import mysql.connector
from globals import user_session
from PIL import Image, ImageTk 
import shutil  
from tkinter import filedialog  
from tkinter import simpledialog

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\user\Downloads\Tkinter-Designer-master\Tkinter-Designer-master\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

scale_value = 0.7  # Tỷ lệ mặc định
IMAGE_WIDTH = 600

def create_rounded_rectangle(canvas, x1, y1, x2, y2, radius, **kwargs):
    # Tạo các điểm cho hình chữ nhật bo tròn
    points = [
        x1 + radius, y1,
        x2 - radius, y1,
        x2, y1,
        x2, y1 + radius,
        x2, y2 - radius,
        x2, y2,
        x2 - radius, y2,
        x1 + radius, y2,
        x1, y2,
        x1, y2 - radius,
        x1, y1 + radius,
        x1, y1
    ]
    return canvas.create_polygon(points, **kwargs, smooth=True)

def fetch_image_data(user_id):
    return fetch_data_from_db("image", user_id)

def fetch_edited_image_data(user_id):
    return fetch_data_from_db("edited_image", user_id)

def fetch_data_from_db(table_name, user_id):
    images = []
    try:
        db = mysql.connector.connect(
            host='localhost',
            user='root',
            password='Haimot@10',
            database='pac_art'
        )
        cursor = db.cursor()
        cursor.execute(f"SELECT name_image FROM {table_name} WHERE user_id = %s", (user_id,))
        images = cursor.fetchall()
    except Exception as e:
        print(f"Error while connecting to the database: {e}")
    finally:
        if cursor:
            cursor.close()
        if db:
            db.close()
    return images

def fetch_user_data(user_id):
    user_data = {}
    try:
        db = mysql.connector.connect(
            host='localhost',
            user='root',
            password='Haimot@10',
            database='pac_art'
        )
        cursor = db.cursor()
        cursor.execute("SELECT name, email FROM user WHERE id = %s", (user_id,))
        user_data = cursor.fetchone()
    except Exception as e:
        print(f"Error fetching user data: {e}")
    finally:
        if cursor:
            cursor.close()
        if db:
            db.close()
    return user_data

def show_image(image_path):
    try:
        img = Image.open(image_path).convert('RGB')
        img_resized = img.resize((IMAGE_WIDTH, int(IMAGE_WIDTH * img.height / img.width)))  # Resize to initial size
        display_image(img_resized)
        canvas.current_image_path = image_path  # Store current image path
    except Exception as e:
        messagebox.showerror("Error", f"Error loading image: {e}")

def display_image(image):
    img_resized = image.resize((int(IMAGE_WIDTH * scale_value), int((IMAGE_WIDTH * scale_value) * image.height / image.width)))  # Maintain aspect ratio
    img_tk = ImageTk.PhotoImage(img_resized)

    # Clear previous image
    canvas.delete("image")  # Delete the existing image

    # Center the image in the canvas
    x = 300
    y = 300

    canvas.create_image(x, y, image=img_tk, anchor="center", tags="image")
    canvas.image = img_tk  # Keep a reference to avoid garbage collection


def on_select(event):
    if listbox_images.curselection():
        selected_image_name = listbox_images.get(listbox_images.curselection())
        image_path = fetch_image_path(selected_image_name, user_session.user_id)
        
        if image_path:
            print(f"Loading image from: {image_path}")
            show_image(image_path)
        else:
            print(f"Error: Image path not found for {selected_image_name}")
    else:
        print("No image selected.")

def on_select_edited(event):
    if listbox_edited_images.curselection():
        selected_image_name = listbox_edited_images.get(listbox_edited_images.curselection())
        image_path = fetch_edited_image_path(selected_image_name, user_session.user_id)
        
        if image_path:
            print(f"Loading edited image from: {image_path}")
            show_image(image_path)
        else:
            print(f"Error: Image path not found for {selected_image_name}")
    else:
        print("No edited image selected.")


def fetch_image_path(image_name, user_id):
    try:
        db = mysql.connector.connect(
            host='localhost',
            user='root',
            password='Haimot@10',
            database='pac_art'
        )
        cursor = db.cursor()
        cursor.execute("SELECT image_path FROM image WHERE name_image = %s AND user_id = %s", (image_name, user_id))
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        print(f"Error while fetching image path: {e}")
    finally:
        if cursor:
            cursor.close()
        if db:
            db.close()
    return None

def fetch_edited_image_path(image_name, user_id):
    try:
        db = mysql.connector.connect(
            host='localhost',
            user='root',
            password='Haimot@10',
            database='pac_art'
        )
        cursor = db.cursor()
        cursor.execute("SELECT image_path FROM edited_image WHERE name_image = %s AND user_id = %s", (image_name, user_id))
        result = cursor.fetchone()
        print(f"Result for {image_name}: {result}")  # Thêm dòng này để kiểm tra kết quả
        return result[0] if result else None
    except Exception as e:
        print(f"Error while fetching edited image path: {e}")
    finally:
        if cursor:
            cursor.close()
        if db:
            db.close()
    return None


def deleteimage():
    if listbox_images.curselection():
        selected_image_name = listbox_images.get(listbox_images.curselection())
        image_path = fetch_image_path(selected_image_name, user_session.user_id)

        if image_path:
            try:
                # Xóa file ảnh
                os.remove(image_path)
                print(f"Deleted image file: {image_path}")

                # Xóa ảnh khỏi cơ sở dữ liệu
                delete_image_from_db(selected_image_name, user_session.user_id)
                
                # Xóa khỏi listbox
                listbox_images.delete(listbox_images.curselection())
            except Exception as e:
                messagebox.showerror("Error", f"Could not delete image: {e}")
        else:
            messagebox.showwarning("Warning", "Image path not found.")
    else:
        messagebox.showwarning("Warning", "No image selected.")

def delete_image_from_db(image_name, user_id):
    try:
        db = mysql.connector.connect(
            host='localhost',
            user='root',
            password='Haimot@10',
            database='pac_art'
        )
        cursor = db.cursor()
        cursor.execute("DELETE FROM image WHERE name_image = %s AND user_id = %s", (image_name, user_id))
        db.commit()
        print(f"Deleted image from database: {image_name}")
    except Exception as e:
        print(f"Error while deleting image from database: {e}")
    finally:
        if cursor:
            cursor.close()
        if db:
            db.close()


def downloadimage():
    if listbox_images.curselection():
        selected_image_name = listbox_images.get(listbox_images.curselection())
        image_path = fetch_image_path(selected_image_name, user_session.user_id)

        if image_path:
            # Mở hộp thoại để người dùng chọn nơi lưu hình ảnh
            file_path = filedialog.asksaveasfilename(defaultextension=".png",
                filetypes=[("PNG files", ".png"), ("JPEG files", ".jpg"), ("All files", ".*")],
                title="Save Image As", initialfile=selected_image_name)
            
            if file_path:  # Kiểm tra xem người dùng đã chọn đường dẫn hay chưa
                try:
                    # Sao chép ảnh đến đường dẫn đã chọn
                    shutil.copy(image_path, file_path)
                    messagebox.showinfo("Download Successful", f"Image downloaded to: {file_path}")
                except Exception as e:
                    messagebox.showerror("Download Failed", f"Error occurred while saving the image: {e}")
        else:
            messagebox.showwarning("Warning", "Image path not found.")
    else:
        messagebox.showwarning("Warning", "No image selected.")


def deleteeditedimage():
    if listbox_edited_images.curselection():
        selected_image_name = listbox_edited_images.get(listbox_edited_images.curselection())
        image_path = fetch_edited_image_path(selected_image_name, user_session.user_id)

        if image_path:
            try:
                # Xóa file ảnh đã chỉnh sửa
                os.remove(image_path)
                print(f"Deleted edited image file: {image_path}")

                # Xóa ảnh đã chỉnh sửa khỏi cơ sở dữ liệu
                delete_edited_image_from_db(selected_image_name, user_session.user_id)
                
                # Xóa khỏi listbox
                listbox_edited_images.delete(listbox_edited_images.curselection())
            except Exception as e:
                messagebox.showerror("Error", f"Could not delete edited image: {e}")
        else:
            messagebox.showwarning("Warning", "Edited image path not found.")
    else:
        messagebox.showwarning("Warning", "No edited image selected.")


def delete_edited_image_from_db(image_name, user_id):
    try:
        db = mysql.connector.connect(
            host='localhost',
            user='root',
            password='Haimot@10',
            database='pac_art'
        )
        cursor = db.cursor()
        cursor.execute("DELETE FROM edited_image WHERE name_image = %s AND user_id = %s", (image_name, user_id))
        db.commit()
        print(f"Deleted edited image from database: {image_name}")
    except Exception as e:
        print(f"Error while deleting edited image from database: {e}")
    finally:
        if cursor:
            cursor.close()
        if db:
            db.close()

def downloadeditedimage():
    if listbox_edited_images.curselection():
        selected_image_name = listbox_edited_images.get(listbox_edited_images.curselection())
        image_path = fetch_edited_image_path(selected_image_name, user_session.user_id)

        if image_path:
            # Mở hộp thoại để người dùng chọn nơi lưu hình ảnh đã chỉnh sửa
            file_path = filedialog.asksaveasfilename(defaultextension=".png",
                filetypes=[("PNG files", ".png"), ("JPEG files", ".jpg"), ("All files", ".*")],
                title="Save Edited Image As", initialfile=selected_image_name)
            
            if file_path:  # Kiểm tra xem người dùng đã chọn đường dẫn hay chưa
                try:
                    # Sao chép ảnh đã chỉnh sửa đến đường dẫn đã chọn
                    shutil.copy(image_path, file_path)
                    messagebox.showinfo("Download Successful", f"Edited image downloaded to: {file_path}")
                except Exception as e:
                    messagebox.showerror("Download Failed", f"Error occurred while saving the edited image: {e}")
        else:
            messagebox.showwarning("Warning", "Edited image path not found.")
    else:
        messagebox.showwarning("Warning", "No edited image selected.")

def zoom_image(event):
    global scale_value
    if event.delta > 0:  # Zoom in
        scale_value = min(scale_value + 0.1, 1.0)  # Adjust max zoom level if needed
    else:  # Zoom out
        scale_value = max(scale_value - 0.1, 0.1)  # Adjust min zoom level if needed

    if hasattr(canvas, 'current_image_path'):
        show_image(canvas.current_image_path)  # Pass only the image path


def link():
    window.destroy()
    import Menu
    Menu.create_menu_window()


def create_menu_window():
    global window, canvas, listbox_images, listbox_edited_images
    window = Tk()

    window.geometry("1000x600")
    window.configure(bg = "#F5F5F5")


    canvas = Canvas(
        window,
        bg = "#EDEDED",
        height = 600,
        width = 1000,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    # Sử dụng hàm tạo hình chữ nhật bo tròn
    canvas.create_rectangle(0.0, 0.0, 600.0, 600.0, fill="#D9D9D9", outline="")
    create_rounded_rectangle(canvas, 651.0, 158.0, 957.0, 557.0, radius=40, fill="#F5F5F5", outline="#2092E5", width=2)
    create_rounded_rectangle(canvas, 651.0, 10.0, 957.0, 153.0, radius=40, fill="#F5F5F5", outline="#2092E5", width=2)

    # Khung cho Listbox hình ảnh
    frame_images = Frame(canvas, bg="#D9D9D9")
    frame_images.place(x=677, y=185, width=249, height=110)

    # Listbox cho hình ảnh
    listbox_images = Listbox(frame_images, width=30, height=10, bg="#FFFFFF", fg="#000000", font=("Inter", 10))
    listbox_images.pack(side="left", fill="both", expand=True)

    # Scrollbar cho Listbox hình ảnh
    scrollbar_images = Scrollbar(frame_images)
    scrollbar_images.pack(side="right", fill="y")
    listbox_images.config(yscrollcommand=scrollbar_images.set)
    scrollbar_images.config(command=listbox_images.yview)

    # Lấy và hiển thị dữ liệu hình ảnh (chỉ tên)
    images = fetch_image_data(user_session.user_id)
    for image in images:
        image_name = os.path.basename(image[0])  # Lấy tên tệp từ đường dẫn
        listbox_images.insert("end", image_name)


    # Khung cho Listbox hình ảnh đã chỉnh sửa
    frame_edited_images = Frame(canvas, bg="#D9D9D9")
    frame_edited_images.place(x=677, y=395, width=249, height=110)

    # Listbox cho hình ảnh đã chỉnh sửa
    listbox_edited_images = Listbox(frame_edited_images, width=30, height=10, bg="#FFFFFF", fg="#000000", font=("Inter", 10))
    listbox_edited_images.pack(side="left", fill="both", expand=True)

    # Scrollbar cho Listbox hình ảnh đã chỉnh sửa
    scrollbar_edited_images = Scrollbar(frame_edited_images)
    scrollbar_edited_images.pack(side="right", fill="y")
    listbox_edited_images.config(yscrollcommand=scrollbar_edited_images.set)
    scrollbar_edited_images.config(command=listbox_edited_images.yview)

    # Lấy và hiển thị dữ liệu hình ảnh đã chỉnh sửa (chỉ tên)
    edited_images = fetch_edited_image_data(user_session.user_id)
    for image in edited_images:
        edited_image_name = os.path.basename(image[0])  # Lấy tên tệp từ đường dẫn
        listbox_edited_images.insert("end", edited_image_name)


    # Bind selection event to the listbox
    listbox_images.bind('<<ListboxSelect>>', on_select)
    listbox_edited_images.bind('<<ListboxSelect>>', on_select_edited)

    canvas.create_rectangle(
        0.0,
        0.0,
        600.0,
        600.0,
        fill="#D9D9D9",
        outline="")

    canvas.create_rectangle(
        677.0,
        185.0,
        926.0,
        295.0,
        fill="#D9D9D9",
        outline="")

    canvas.create_rectangle(
        677.0,
        395.0,
        926.0,
        505.0,
        fill="#D9D9D9",
        outline="")

    canvas.create_text(
        770.0,
        10.0,
        anchor="nw",
        text="User",
        fill="#1F92E5",
        font=("Helvetica Neue", "28", "bold")
    )

    # Lấy tên và email của người dùng
    user_data = fetch_user_data(user_session.user_id)
    user_name = user_data[0] if user_data else "Unknown"
    user_email = user_data[1] if user_data else "Unknown"

    canvas.create_text(
        655.0,
        64.0,
        anchor="nw",
        text=f"Name: {user_name}",
        fill="#1F92E5",
        font=("Helvetica Neue", "16", "normal")
    )

    canvas.create_text(
        655.0,
        100.0,
        anchor="nw",
        text=f"Email: {user_email}",
        fill="#1F92E5",
        font=("Helvetica Neue", "16", "normal")
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    dowload_edited_image = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=downloadeditedimage,
        relief="flat"
    )
    dowload_edited_image.place(
        x=830.0,
        y=512.0,
        width=60.0,
        height=30.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=link,
        relief="flat"
    )
    button_2.place(
        x=966.0,
        y=566.0,
        width=30.0,
        height=30.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    dowload_image = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=downloadimage,
        relief="flat"
    )
    dowload_image.place(
        x=830.0,
        y=302.0,
        width=60.0,
        height=30.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    delete_image = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=deleteimage,
        relief="flat"
    )
    delete_image.place(
        x=714.0,
        y=302.0,
        width=60.0,
        height=30.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    delete_edited_image = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=deleteeditedimage,
        relief="flat"
    )
    delete_edited_image.place(
        x=714.0,
        y=512.0,
        width=60.0,
        height=30.0
    )

    canvas.create_text(
        675.0,
        164.0,
        anchor="nw",
        text="Image:",
        fill="#1F92E5",
        font=("Inter Bold", 14 * -1)
    )

    canvas.create_text(
        675.0,
        374.0,
        anchor="nw",
        text="Edited Image:",
        fill="#1F92E5",
        font=("Inter Bold", 14 * -1)
    )

    window.bind("<MouseWheel>", zoom_image)

    window.resizable(False, False)
    window.mainloop()

# # Main application logic wrapped under if __name__ == "__main__"
# if __name__ == "__main__":
#     create_menu_window()  # Start the application with the menu window
