
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Button, PhotoImage, messagebox, filedialog, END
import os
from tkinter import filedialog
from tkinter import messagebox
from globals import selected_image_path, selected_folder_images, user_session  
import mysql.connector


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\user\Downloads\Tkinter-Designer-master\Tkinter-Designer-master\build\assets\frame2")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def link():
    window.destroy()
    import Profile
    Profile.create_menu_window()


def logout():
    # Ask the user for confirmation
    response = messagebox.askyesno("Confirmation", "Are you sure you want to logout?")
    
    # If user clicks "Yes", proceed to destroy the current window and go back to Menu
    if response:
        window.destroy()
        import SignIn
        SignIn.create_menu_window()


def addimage():
    global selected_image_path
    try:
        selected_image_path = filedialog.askopenfilename(
            title="Select an Image",
            filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.gif;*.jfif")]
        )
        
        if selected_image_path:
            print(f"Image selected: {selected_image_path}")  # Debug output
            
            # Kết nối đến cơ sở dữ liệu và lưu ảnh
            db = mysql.connector.connect(
                host='localhost',
                user='root',
                password='Haimot@10',
                database='pac_art'
            )
            cursor = db.cursor()

            # Lấy tên ảnh từ đường dẫn (có thể dùng os.path.basename)
            name_image = selected_image_path.split('/')[-1]
            
            # Chèn dữ liệu vào bảng image
            sql = "INSERT INTO image (name_image, image_path, user_id) VALUES (%s, %s, %s)"
            values = (name_image, selected_image_path, user_session.user_id)  # Cung cấp đủ tham số
            cursor.execute(sql, values)
            db.commit()  # Lưu thay đổi

            cursor.close()
            db.close()
            print("Image added to database successfully.")  # Debug output

            window.destroy()
            from Function import create_menu_window
            create_menu_window(selected_image_path)
        else:
            messagebox.showinfo("No Images", "Please select an image to proceed.")
    
    except Exception as e:
        print(f"Error selecting image: {e}")  # Log any errors that occur


def addfolder():
    global selected_folder_images
    folder_path = filedialog.askdirectory(title="Select a Folder")
    if folder_path:
        image_extensions = ['.png', '.jpg', '.jpeg', '.gif', '.jfif']
        selected_folder_images = [os.path.join(folder_path, f) for f in os.listdir(folder_path)
                                  if os.path.splitext(f)[1].lower() in image_extensions]
        if selected_folder_images:
            print(f"Images found: {selected_folder_images}")  # Debug output
            window.destroy()
            from Function import create_menu_window  # Avoid circular import
            create_menu_window(folder_images=selected_folder_images)
        else:
            messagebox.showinfo("No Images", "No images found in the selected folder.")
    else:
        messagebox.showinfo("No Folder Selected", "Please select a folder to proceed.")


def create_menu_window(image_path=None, folder_images=None):
    global window
    window = Tk()

    window.geometry("1000x600")
    window.configure(bg = "#E7F9F1")


    canvas = Canvas(
        window,
        bg = "#EDEDED",
        height = 600,
        width = 1000,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        0.0,
        0.0,
        1000.0,
        110.0,
        fill="#1F92E5",
        outline="")

    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        90.0,
        54.0,
        image=image_image_1
    )

    canvas.create_text(
        330.0,
        17.0,
        anchor="nw",
        text="PAC ART",
        fill="#FFFFFF",
        font=("JacquesFrancoisShadow Regular", 64 * -1)
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    Addimage = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=addimage,
        relief="flat"
    )
    Addimage.place(
        x=225.0,
        y=226.0,
        width=200.0,
        height=246.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    Addfolder = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=addfolder,
        relief="flat"
    )
    Addfolder.place(
        x=576.0,
        y=226.0,
        width=200.0,
        height=246.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=link,
        relief="flat"
    )
    button_3.place(
        x=904.0,
        y=15.0,
        width=80.0,
        height=80.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    Logout = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=logout,
        relief="flat"
    )
    Logout.place(
        x=821.0,
        y=15.0,
        width=80.0,
        height=80.0
    )
    window.resizable(False, False)
    window.mainloop()

# # Main application logic wrapped under if __name__ == "__main__"
# if __name__ == "__main__":
#     create_menu_window()  # Start the application with the menu window