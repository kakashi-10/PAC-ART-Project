# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Button, PhotoImage
from PIL import Image, ImageTk
from tkinter import messagebox
from Menu import selected_image_path
from tkinter import filedialog


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\user\Downloads\Tkinter-Designer-master\Tkinter-Designer-master\build\assets\frame3")

# Helper function to get asset paths
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

displayed_image_id = None  # Global variable to track the image ID on the canvas

# Function to go back to the Menu page
def back():
    global loaded_image, canvas, displayed_image_id
   # Ask the user for confirmation
    response = messagebox.askyesno("Confirmation", "Are you sure you want to go back to the menu?")
    
    # If user clicks "Yes", proceed to delete the old image and go back to Menu
    if response:
        # Clear the currently displayed image
        if displayed_image_id is not None:
            canvas.delete(displayed_image_id)
            displayed_image_id = None  # Reset the image ID
        loaded_image = None  # Reset the loaded image reference

        # Destroy the current window
        window.destroy()

        # Import and call the menu creation function to go back to the Menu page
        import Menu
        Menu.create_menu_window()

# Function to load and display the selected image
def load_selected_image():
    global loaded_image, canvas, exportimage, displayed_image_id
    try:
        if selected_image_path:  # Check if the path exists
            # Clear the previously displayed image if it exists
            if displayed_image_id is not None:
                canvas.delete(displayed_image_id)
            
            loaded_image = Image.open(selected_image_path)  # Store the image globally
            img_resized = loaded_image.resize((400, 400))  # Resize the image for display
            img_tk = ImageTk.PhotoImage(img_resized)
            displayed_image_id = canvas.create_image(325, 300, image=img_tk, anchor="center")
            canvas.image = img_tk  # Keep a reference to avoid garbage collection
    except Exception as e:
        print(f"Error loading image: {e}")


# Function to export the displayed image
def exportimage():
    global loaded_image, load_selected_image
    if selected_image_path and loaded_image:
        file_path = filedialog.asksaveasfilename(defaultextension=".png",
            filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg"), ("All files", "*.*")])
        if file_path:
            try:
                loaded_image.save(file_path)  # Save the image to the selected path
                messagebox.showinfo("Export Successful", f"Image has been saved to: {file_path}")
            except Exception as e:
                messagebox.showerror("Export Failed", f"Error occurred while saving the image: {e}")
    else:
        messagebox.showwarning("No Image", "No image to export.")


# Main function to create the window
def create_menu_window(image_path=None):
    global window, canvas
    window = Tk()

    window.geometry("1000x600")
    window.configure(bg="#FFFFFF")

    canvas = Canvas(
        window,
        bg="#FFFFFF",
        height=600,
        width=1000,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )

    canvas.place(x=0, y=0)
    canvas.create_rectangle(
        0.0, 0.0, 650.0, 600.0,
        fill="#D9D9D9", outline=""
    )

    # Button 1 (Functionality can be mapped as needed)
    button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("Button 1 clicked!"),
        relief="flat"
    )
    button_1.place(x=750.0, y=91.0, width=170.0, height=40.0)

    # Button 2
    button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("Button 2 clicked!"),
        relief="flat"
    )
    button_2.place(x=750.0, y=304.0, width=170.0, height=40.0)

    # Button 3
    button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("Button 3 clicked!"),
        relief="flat"
    )
    button_3.place(x=750.0, y=375.0, width=170.0, height=40.0)

    # Button 4
    button_image_4 = PhotoImage(file=relative_to_assets("button_4.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("Button 4 clicked!"),
        relief="flat"
    )
    button_4.place(x=750.0, y=162.0, width=170.0, height=40.0)

    # Button 5 (Logout or Back)
    button_image_5 = PhotoImage(file=relative_to_assets("button_5.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("Button 5 clicked!"),
        relief="flat"
    )
    button_5.place(x=750.0, y=233.0, width=170.0, height=40.0)

    # Back Button (top-right corner)
    button_image_6 = PhotoImage(file=relative_to_assets("button_6.png"))
    back_button = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=back,  # Going back to the menu
        relief="flat"
    )
    back_button.place(x=950.0, y=0, width=50.0, height=50.0)

    # Button 7 (Another action button)
    button_image_7 = PhotoImage(file=relative_to_assets("button_7.png"))
    export_image = Button(
        image=button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command=exportimage,
        relief="flat"
    )
    export_image.place(x=650.0, y=2.0, width=50.0, height=50.0)

    canvas.create_rectangle(
        650.0, 472.0, 1000.0, 600.0,
        fill="#D9D9D9", outline=""
    )

    # Display the selected image if provided
    if image_path:
        try:
            img = Image.open(image_path)
            img = img.resize((400, 400))  # Resize the image for display
            img_tk = ImageTk.PhotoImage(img)
            canvas.create_image(325, 300, image=img_tk, anchor="center")
            canvas.image = img_tk  # Keep a reference to avoid garbage collection
        except Exception as e:
            print(f"Error loading image: {e}")

    # Display the selected image (if any)
    load_selected_image()

    window.resizable(False, False)
    window.mainloop()

# Ensure the application runs only when this script is executed directly
if __name__ == "__main__":
    create_menu_window()
