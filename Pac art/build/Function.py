# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Button, PhotoImage, messagebox, filedialog, Listbox, Scrollbar, Scale, END
from PIL import Image, ImageTk
import os
import cv2
import numpy as np


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\user\Downloads\Tkinter-Designer-master\Tkinter-Designer-master\build\assets\frame3")

# Helper function to get asset paths
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# Global variable to hold the edited image
edited_image = None

sharpness_slider = None

color_correction_sliders = None

# Global variables for sliders
brightness_slider = None
contrast_slider = None

loaded_image = None
current_image = None

# Constants for image dimensions
IMAGE_WIDTH = 600
IMAGE_HEIGHT = 600

# Function to go back to the Menu page
def back():
    global window
    if window and window.winfo_exists():
        response = messagebox.askyesno("Confirmation", "Are you sure you want to go back to Menu?")
        if response:
            window.destroy()
            window = None
            import Menu
            Menu.create_menu_window(image_path=None, folder_images=None)


# Function to load and display the selected image
def load_selected_image(image_path):
    global loaded_image, current_image
    try:
        img = Image.open(image_path)
        loaded_image = img
        current_image = img.copy()
        img_resized = img.resize((IMAGE_WIDTH, IMAGE_HEIGHT))
        img_tk = ImageTk.PhotoImage(img_resized)
        canvas.create_image(325, 300, image=img_tk, anchor="center")
        canvas.image = img_tk
    except Exception as e:
        print(f"Error loading image: {e}")


def load_folder_images(folder_images):
    global listbox
    listbox.delete(0, 'end')
    for img in folder_images:
        listbox.insert("end", os.path.basename(img))
    listbox.bind('<<ListboxSelect>>', lambda event: display_selected_image(folder_images))

def display_selected_image(folder_images):
    # Lấy ảnh đã chọn
    selected_image = listbox.get(listbox.curselection())
    img_path = next(img for img in folder_images if os.path.basename(img) == selected_image)
    load_selected_image(img_path)
    
# Function to export the displayed image
def exportimage():
    global edited_image
    if edited_image:
        file_path = filedialog.asksaveasfilename(defaultextension=".png",
            filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg"), ("All files", "*.*")])
        if file_path:
            try:
                edited_image.save(file_path)
                messagebox.showinfo("Export Successful", f"Image has been saved to: {file_path}")
            except Exception as e:
                messagebox.showerror("Export Failed", f"Error occurred while saving the image: {e}")
    else:
        messagebox.showwarning("No Image", "No image to export.")

def adjust_brightness_and_contrast(image, brightness=0, contrast=0):
    img = np.array(image)
    img = cv2.convertScaleAbs(img, alpha=(contrast / 100 + 1), beta=brightness)
    return Image.fromarray(img)

def adjust_sharpness(image, sharpness=1.0):
    img = np.array(image)
    kernel = np.array([[0, -1, 0],
                       [-1, 5 + sharpness, -1],
                       [0, -1, 0]])
    img = cv2.filter2D(img, -1, kernel)
    return Image.fromarray(img)

def adjust_color_correction(image, r=1.0, g=1.0, b=1.0):
    img = np.array(image)
    img[:, :, 0] = cv2.multiply(img[:, :, 0], b)
    img[:, :, 1] = cv2.multiply(img[:, :, 1], g)
    img[:, :, 2] = cv2.multiply(img[:, :, 2], r)
    return Image.fromarray(img)

def apply_hdr_effect(image):
    img = np.array(image)
    hdr_img = cv2.bilateralFilter(img, d=15, sigmaColor=75, sigmaSpace=75)
    gray = cv2.cvtColor(hdr_img, cv2.COLOR_BGR2GRAY)
    gray = cv2.equalizeHist(gray)
    hdr_img = cv2.cvtColor(gray, cv2.COLOR_GRAY2BGR)
    img = cv2.addWeighted(img, 0.5, hdr_img, 0.5, 0)
    return Image.fromarray(img)


def apply_all_adjustments():
    global current_image, edited_image
    if current_image:
        brightness = brightness_slider.get() if brightness_slider else 0
        contrast = contrast_slider.get() if contrast_slider else 0
        sharpness = sharpness_slider.get() if sharpness_slider else 1.0

        r, g, b = (1.0, 1.0, 1.0)
        if color_correction_sliders:
            r = color_correction_sliders[0].get()
            g = color_correction_sliders[1].get()
            b = color_correction_sliders[2].get()

        img = adjust_brightness_and_contrast(current_image, brightness, contrast)
        img = adjust_sharpness(img, sharpness)
        img = adjust_color_correction(img, r, g, b)
        img = apply_hdr_effect(img)

        edited_image = img
        img_resized = img.resize((IMAGE_WIDTH, IMAGE_HEIGHT))
        img_tk = ImageTk.PhotoImage(img_resized)
        canvas.create_image(325, 300, image=img_tk, anchor="center")
        canvas.image = img_tk


def toggle_brightness_contrast_sliders():
    global brightness_slider, contrast_slider
    if window and window.winfo_exists():
        if brightness_slider is None or contrast_slider is None:
            brightness_slider = Scale(window, from_=-100, to=100, label='Brightness', orient='horizontal',
                                       command=lambda _: apply_all_adjustments())
            brightness_slider.place(x=650, y=50)
            contrast_slider = Scale(window, from_=-100, to=100, label='Contrast', orient='horizontal',
                                    command=lambda _: apply_all_adjustments())
            contrast_slider.place(x=650, y=100)
        else:
            if brightness_slider.winfo_exists() and brightness_slider.winfo_ismapped():
                brightness_slider.place_forget()
                contrast_slider.place_forget()
            else:
                brightness_slider.place(x=650, y=50)
                contrast_slider.place(x=650, y=100)

def toggle_sharpness_slider():
    global sharpness_slider
    if window and window.winfo_exists():
        if sharpness_slider is None:
            sharpness_slider = Scale(window, from_=0, to=100, label='Sharpness', orient='horizontal',
                                     command=lambda _: apply_all_adjustments())
            sharpness_slider.place(x=650, y=160)
        else:
            if sharpness_slider.winfo_exists() and sharpness_slider.winfo_ismapped():
                sharpness_slider.place_forget()
            else:
                sharpness_slider.place(x=650, y=160)

def toggle_color_correction_sliders():
    global color_correction_sliders
    if window and window.winfo_exists():
        if color_correction_sliders is None:
            r_slider = Scale(window, from_=0, to=3, resolution=0.1, label='Red', orient='horizontal',
                             command=lambda _: apply_all_adjustments())
            r_slider.place(x=650, y=220)

            g_slider = Scale(window, from_=0, to=3, resolution=0.1, label='Green', orient='horizontal',
                             command=lambda _: apply_all_adjustments())
            g_slider.place(x=650, y=270)

            b_slider = Scale(window, from_=0, to=3, resolution=0.1, label='Blue', orient='horizontal',
                             command=lambda _: apply_all_adjustments())
            b_slider.place(x=650, y=320)

            color_correction_sliders = (r_slider, g_slider, b_slider)
        else:
            for slider in color_correction_sliders:
                if slider.winfo_exists():
                    slider.place_forget()
            color_correction_sliders = None

def toggle_hdr_button():
    global current_image
    if current_image:
        img = apply_hdr_effect(current_image)
        edited_image = img
        img_resized = img.resize((IMAGE_WIDTH, IMAGE_HEIGHT))
        img_tk = ImageTk.PhotoImage(img_resized)
        canvas.create_image(325, 300, image=img_tk, anchor="center")
        canvas.image = img_tk


# Main function to create the window
def create_menu_window(image_path=None, folder_images=None):
    global window, canvas, listbox
    window = Tk()

    window.geometry("1000x600")
    window.configure(bg="#FFFFFF")

    canvas = Canvas(
        window,
        bg="#FFFFFF",
        height=600,
        width=1000,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )

    canvas.place(x=0, y=0)
    canvas.create_rectangle(
        0.0, 0.0, 650.0, 600.0,
        fill="#D9D9D9", outline=""
    )


    # Button 1 (Functionality can be mapped as needed)
    button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
    brightness_and_contrast = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=toggle_brightness_contrast_sliders,
        relief="flat"
    )
    brightness_and_contrast.place(x=760.0, y=91.0, width=170.0, height=40.0)

    # Button 2
    button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
    hdr = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=toggle_hdr_button,
        relief="flat"
    )
    hdr.place(x=760.0, y=304.0, width=170.0, height=40.0)

    # Button 3
    button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
    ai = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("Button 3 clicked!"),
        relief="flat"
    )
    ai.place(x=760.0, y=375.0, width=170.0, height=40.0)

    # Button 4
    button_image_4 = PhotoImage(file=relative_to_assets("button_4.png"))
    sharpness = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=toggle_sharpness_slider,
        relief="flat"
    )
    sharpness.place(x=760.0, y=162.0, width=170.0, height=40.0)

    # Button 5 (Logout or Back)
    button_image_5 = PhotoImage(file=relative_to_assets("button_5.png"))
    color_correction = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=toggle_color_correction_sliders,
        relief="flat"
    )
    color_correction.place(x=760.0, y=233.0, width=170.0, height=40.0)

    # Back Button (top-right corner)
    button_image_6 = PhotoImage(file=relative_to_assets("button_6.png"))
    back_button = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=back,  # Going back to the menu
        relief="flat"
    )
    back_button.place(x=950.0, y=0, width=50.0, height=50.0)

    # Button 7 (Another action button)
    button_image_7 = PhotoImage(file=relative_to_assets("button_7.png"))
    export_image = Button(
        image=button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command=exportimage,
        relief="flat"
    )
    export_image.place(x=650.0, y=2.0, width=50.0, height=50.0)

    canvas.create_rectangle(
        650.0, 472.0, 1000.0, 600.0,
        fill="#D9D9D9", outline=""
    )

    if image_path:
        load_selected_image(image_path)

    if folder_images:
        scrollbar = Scrollbar(window)
        scrollbar.place(x=970, y=475, height=120)
        listbox = Listbox(window, yscrollcommand=scrollbar.set)
        listbox.place(x=660, y=475, width=300, height=120)
        scrollbar.config(command=listbox.yview)
        load_folder_images(folder_images)

    window.resizable(False, False)
    window.mainloop()

# Ensure the application runs only when this script is executed directly
if __name__ == "__main__":
    create_menu_window()
